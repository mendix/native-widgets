// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { NativeModules, Platform } from "react-native";
import notifee, { AndroidChannel, AndroidImportance, Notification } from "@notifee/react-native";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Displays the specified notification straight away.
 *
 * Note: It is not possible to display a notification whilst the app is in the foreground on iOS 9.
 * @param {string} body - This field is required.
 * @param {string} title
 * @param {string} subtitle
 * @param {boolean} playSound
 * @param {string} actionName
 * @param {string} actionGuid
 * @returns {Promise.<void>}
 */
export async function DisplayNotification(
    body?: string,
    title?: string,
    subtitle?: string,
    playSound?: boolean,
    actionName?: string,
    actionGuid?: string
): Promise<void> {
    // BEGIN USER CODE
    if (!body) {
        throw new Error("Input parameter 'Body' is required");
    }

    // Documentation Documentation https://github.com/invertase/notifee
    if (NativeModules && !NativeModules.NotifeeApiModule) {
        return Promise.reject(new Error("Notifee native module is not available in your app"));
    }

    const channelId = playSound ? "mendix-local-notifications-withsound" : "mendix-local-notifications";
    await createNotificationChannelIfNeeded(channelId);

    const notification: Notification = {
        title: title || undefined,
        body,
        android: { channelId, sound: "default" },
        ios: playSound ? { sound: "default" } : {}
    };

    if (subtitle && Platform.OS === "ios") {
        notification.subtitle = subtitle;
    }

    if (actionName || actionGuid) {
        notification.data = {
            actionName: actionName ?? "",
            guid: actionGuid ?? ""
        };
    }

    await notifee.displayNotification(notification);

    async function createNotificationChannelIfNeeded(channelId: string): Promise<void> {
        if (Platform.OS === "ios") {
            return;
        }
        const existingChannel = await notifee.getChannel(channelId);
        const channel: AndroidChannel = {
            id: channelId,
            name: "Local Notifications",
            importance: AndroidImportance.HIGH,
            ...(playSound ? { sound: "default" } : {})
        };
        if (existingChannel === null) {
            await notifee.createChannel(channel);
        }
    }

    return Promise.resolve();
    // END USER CODE
}
