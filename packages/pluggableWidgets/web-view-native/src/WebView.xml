<?xml version="1.0" encoding="utf-8" ?>
<widget id="com.mendix.widget.native.webview.WebView" supportedPlatform="Native" needsEntityContext="true" offlineCapable="true" pluginWidget="true" xmlns="http://www.mendix.com/widget/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mendix.com/widget/1.0/ ../../../node_modules/mendix/custom_widget.xsd">
    <name>Web view</name>
    <description>Display an external web page or load custom HTML.</description>
    <studioProCategory>Display</studioProCategory>
    <studioCategory>Display</studioCategory>
    <properties>
        <propertyGroup caption="Data source">
            <property key="url" type="textTemplate" required="false">
                <caption>URL</caption>
                <description>The URL of the web page that is loaded.</description>
            </property>
            <property key="content" type="textTemplate" required="false">
                <caption>Content</caption>
                <description>The HTML content to be rendered. This will precede URL</description>
            </property>
        </propertyGroup>
        <propertyGroup caption="Events">
            <property key="onLoad" type="action" required="false">
                <caption>On load</caption>
                <description />
            </property>
            <property key="onError" type="action" required="false">
                <caption>On error</caption>
                <description />
            </property>
        </propertyGroup>
        <propertyGroup caption="Callback">
            <property key="onMessage" type="action" required="false">
                <caption>On message</caption>
                <description>Used to communicate from the loaded webpage to the native app trough window.ReactNativeWebView.postMessage([string])</description>
            </property>
            <property key="onMessageInput" type="attribute" required="false">
                <caption>Message attribute</caption>
                <description>The attribute where the input message will be stored. This can be used to read the input in the onMessage event.</description>
                <attributeTypes>
                    <attributeType name="String" />
                </attributeTypes>
            </property>
        </propertyGroup>
        <propertyGroup caption="Advanced">
            <property key="requestMethod" type="enumeration" defaultValue="GET">
                <caption>Request method</caption>
                <description>The method verb for the request</description>
                <enumerationValues>
                    <enumerationValue key="GET">GET</enumerationValue>
                    <enumerationValue key="POST">POST</enumerationValue>
                </enumerationValues>
            </property>
            <property key="postBody" type="textTemplate" required="false">
                <caption>POST Body</caption>
                <description>The body that will be send in the POST request</description>
            </property>
            <property key="headerList" type="object" isList="true" required="false">
                <caption>Header list</caption>
                <description>On Android, headers are only support with the GET method</description>
                <properties>
                    <propertyGroup caption="Header list group">
                        <property key="headerName" type="expression" required="true">
                            <caption>Header name</caption>
                            <description>Name of the header</description>
                            <returnType type="String" />
                        </property>
                        <property key="headerValue" type="expression" required="true">
                            <caption>Header value</caption>
                            <description>Value of the header</description>
                            <returnType type="String" />
                        </property>
                    </propertyGroup>
                </properties>
            </property>
            <property key="userAgent" type="string" required="false">
                <caption>User agent</caption>
                <description>A custom user agent string will be included with the request.</description>
            </property>
            <property key="openLinksExternally" type="boolean" defaultValue="false">
                <caption>Open links externally</caption>
                <description>If true, links embedded in source document will be opened in external browser instead of inside this widget.</description>
            </property>
        </propertyGroup>
    </properties>
</widget>
